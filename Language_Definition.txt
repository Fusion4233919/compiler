Program:        Def_List Fun_Def_List

Def_List:       Def_List Def ";" |  

Fun_Def_List:   Fun_Def_List Fun_Def | 

Def:            TYPE Var_List | FN Fun_Name_List

Fun_Def:	    "function" FUN_TYPE Fun_ID "("Fun_Var_List")" "declare" Def_List "do" Exp_List "done"


TYPE:		    "int" 

FN:             "fn"

FUN_TYPE:       TYPE | "void" | FN

Var_List:	    Var_List"," Var | Var

Var:		    Var"["Number"]" | ID

Fun_Name_List   Fun_Name_List "," Fun_ID | Fun_ID

Fun_Var_List:	Fun_Var_List"," Fun_Var | Fun_Var | "void"

Fun_Var:	    TYPE ID | FN Fun_ID


Number:		    0|([1-9][0-9]*)

String:         \"(\\.|[^"\\])*\"

ID:		        ([A-Z]|[a-z])+

Fun_ID:		    _([A-Z]|[a-z])+


Exp_List:       Exp_List Exp | Exp

Exp:	        As_Exp ";" | Op_Exp ";" | Cond_Exp ";"
                | If_Stmt | Lop_Stmt
                | "break"";" | "continue"";" | "return" Op_Exp";" | "return" ";"
                | Input_Exp | Output_Exp
                | Fun_Def | Fas_Exp

Fas_Exp:        Fun_ID "=" Fun_ID | Fun_ID "=" Fun_Value

Input_Exp:      "_input" "(" String "," LList ")"

Output_Exp:     "_output" "(" String "," List ")"
                | "_output" "(" String ")"


As_Exp:		    LValue = Op_Exp 


Cond_Exp:	    Cond_Exp "||" Cond_Term | Cond_Term 

Cond_Term:  	Cond_Term "&&" Cond_Factor | Cond_Factor

Cond_Factor:	"("Cond_Exp")" | Op_Exp Cond_op Op_Exp

Cond_op:	    "<" | ">" | "==" | "!=" | "<=" | ">="



Op_Exp:		    Op_Exp Add_op Op_Term | Op_Term

Op_Term:	    Op_Term Mul_op Op_Factor | Op_Factor

Op_Factor:	    "("Op_Exp")" | LValue | Fun_Value | Number

Add_op:		    "+" | "-" 

Mul_op:		    "*" | "/" | "%"

    

If_Stmt:	    "if" "("Cond_Exp")" "do" Exp_List "done"

Lop_Stmt:	    "loop" "("Cond_Exp")" "do" Exp_List "done"

LValue:         LValue "[" LValue "]" | LValue "[" Number "]" | ID

Fun_Value:      Fun_ID "("List")" | Fun_ID "(" ")"

List:           List "," LValue | List "," Number | List "," Fun_ID
                | LValue | Number | Fun_ID

LList           LList "," "&" LValue | "&" LValue




