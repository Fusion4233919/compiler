Program:	    Program Fun-Def | Program Def-Exp";"


Def-Exp:        TYPE Var-List

TYPE:		    "int" | "float"

FUNC-TYPE:      TYPE | "void"

Var-List:	    Var-List"," Var | Var

Var:		    Var"["Number"]" | ID


Fun-Def:	    "function" FUNC-TYPE Fun-ID "("Fun-Var-List")" "do" Exp-List "done"

Fun-Var-List:	Fun-Var-List"," Fun-Var | Fun-Var

Fun-Var:	    TYPE ID 


Number:		    0|([1-9][0-9]*)

ID:		        ([A-Z]|[a-z])+

Fun-ID:		    _([A-Z]|[a-z])+



Exp-List:	    Exp-List Exp | Exp

Exp:	        Def-Exp";" | Op-Exp";" | As-Exp";" | Cond-Exp
                | If-Stmt | Lop-Stmt
                | "break"";" | "continue"";" | "return" Op-Exp";"


As-Exp:		    Var = Op-Exp


Cond-Exp:	    Cond-Exp "||" Cond-Term | Cond-Term 

Cond-Term:  	Cond-Term "&&" Cond-Factor | Cond-Factor

Cond-Factor:	Cond-Factor Cond-op Op-Exp | Op-Exp

Cond-op:	    "<" | ">" | "==" | "!=" | "<=" | ">="



Op-Exp:		    Op-Exp Add-op Op-Term | Op-Term

Op-Term:	    Op-Term Mul-op Op-Factor | Op-Factor

Op-Factor:	    "("Op-Exp")" | Var | Fun-Value | number

Add-op:		    "+" | "-" 

Mul-op:		    "*" | "/" | "%"

    

If-Stmt:	    "if" "("Cmp-Exp")" "do" Exp-List "done"

Lop-Stmt:	    "loop" "("Op-Exp")" "do" Exp-List "done"

Fun-Value:      Fun-Id "("Var-List")"


